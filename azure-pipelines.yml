# SAP InfraDevOps pipeline

trigger:
- none

resources:
- repo: self

stages:
- stage: provision_hanadb_infrastructure
  displayName: Provision HANA DB Infrastructure
  jobs:  
  - job: terraform
    displayName: Run Terraform Scripts
    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            wget https://releases.hashicorp.com/terraform/0.12.7/terraform_0.12.7_linux_amd64.zip
            sudo apt install unzip
            unzip terraform_0.12.7_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version
        displayName: 'Install Terraform'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            cd ./hana_infra/infra/hana_infra
            echo $(pwd)
            echo $(ls)
            echo SUBSCRIPTION is $(subscription)
            export AZURE_SUBSCRIPTION_ID=$(subscription)
            echo $AZURE_SUBSCRIPTION_ID
            export AZURE_CLIENT_ID=$(clientID)
            echo $AZURE_CLIENT_ID
            export AZURE_SECRET=$(clientSecret)
            echo $AZURE_SECRET
            export AZURE_TENANT=$(tenant)
            echo $AZURE_TENANT
            export ARM_SUBSCRIPTION_ID=$(subscription)
            echo $ARM_SUBSCRIPTION_ID
            export ARM_CLIENT_ID=$(clientID)
            echo $ARM_CLIENT_ID
            export ARM_CLIENT_SECRET=$(clientSecret)
            echo $ARM_CLIENT_SECRET
            export ARM_TENANT_ID=$(tenant)  
            echo $ARM_TENANT_ID      

            ssh-keygen -f ~/.ssh/id_rsa -P ""

            export TF_LOG=DEBUG 

            terraform init
            terraform validate
            terraform apply -auto-approve
        displayName: Generate HANA DB infrastructure using Terraform


- stage: unit_test
  displayName: Unit test
  jobs:  
  - job: unitTestJob
    displayName: Job to run unit test
    pool:
      vmImage: 'ubuntu-latest'

    steps:

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        failOnStandardError: true
        inlineScript: |
          #hanaPublicIP=$(az vm show -d -g delautomatedhana -n hanadb --query publicIps -o tsv)
          #echo HANA IP is $hanaPublicIP
          #ssh -tt -o StrictHostKeyChecking=no demo@$hanaPublicIP << ENDSSH
          az vm get-instance-view --name hanadb1 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi
          
          az vm get-instance-view --name hanadb2 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi      

          az vm get-instance-view --name hanadb3 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi  
          
          az vm get-instance-view --name hanadb4 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi  

          az vm get-instance-view --name hanadb5 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi  

          az vm get-instance-view --name hanadb6 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi        

          az vm get-instance-view --name hanadb7 --resource-group $(resourceGroup) --query instanceView.statuses[1] --output table > vmstatus.log
          if grep -F "VM running" vmstatus.log; then
            echo 'VM is running'
          else
            echo 'VM is not running' >&2
          fi      

      displayName: Unit test for HANA DB VM

- stage: publish_build
  displayName: Publish build
  jobs:  
  - job: publishBuildJob
    displayName: Job to publish a build
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: self
      persistCredentials: true
      displayName: 'Git tag'
      
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          REPO_PAT=$(repoPAT)
          AUTH=$(echo -n ":$REPO_PAT" | openssl base64 | tr -d '\n')
          git config --global http.extraheader "AUTHORIZATION: basic $AUTH"
          
          git clone $(gitRepoURL)
          cd $(gitRepoName)
          echo $(ls)
          # git push -f :refs/tags/tagname1
          git status
          git pull
          git tag $(Build.BuildId)
          git push origin $(Build.BuildId)
